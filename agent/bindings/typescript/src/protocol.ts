import * as rpc from "vscode-jsonrpc/node";
// ==============
// Client->Server
// ==============
const initialize = new rpc.RequestType<ClientInfo, ServerInfo, void>(initialize)
const shutdown = new rpc.RequestType<null, null, void>(shutdown)
const chat_new = new rpc.RequestType<null, string, void>(chat/new)
const chat_restore = new rpc.RequestType<TODO, string, void>(chat/restore)
const chat_models = new rpc.RequestType<TODO, TODO, void>(chat/models)
const chat_export = new rpc.RequestType<null, array, void>(chat/export)
const chat_remoteRepos = new rpc.RequestType<TODO, TODO, void>(chat/remoteRepos)
const chat_submitMessage = new rpc.RequestType<TODO, ExtensionMessage, void>(chat/submitMessage)
const chat_editMessage = new rpc.RequestType<TODO, ExtensionMessage, void>(chat/editMessage)
const commands_explain = new rpc.RequestType<null, string, void>(commands/explain)
const commands_test = new rpc.RequestType<null, string, void>(commands/test)
const commands_smell = new rpc.RequestType<null, string, void>(commands/smell)
const commands_custom = new rpc.RequestType<TODO, CustomCommandResult, void>(commands/custom)
const editCommands_code = new rpc.RequestType<TODO, EditTask, void>(editCommands/code)
const editCommands_test = new rpc.RequestType<null, EditTask, void>(editCommands/test)
const editCommands_document = new rpc.RequestType<null, EditTask, void>(editCommands/document)
const editTask_accept = new rpc.RequestType<TODO, null, void>(editTask/accept)
const editTask_undo = new rpc.RequestType<TODO, null, void>(editTask/undo)
const editTask_cancel = new rpc.RequestType<TODO, null, void>(editTask/cancel)
const editTask_getFoldingRanges = new rpc.RequestType<GetFoldingRangeParams, GetFoldingRangeResult, void>(editTask/getFoldingRanges)
const command_execute = new rpc.RequestType<ExecuteCommandParams, any, void>(command/execute)
const autocomplete_execute = new rpc.RequestType<AutocompleteParams, AutocompleteResult, void>(autocomplete/execute)
const graphql_getRepoIds = new rpc.RequestType<TODO, TODO, void>(graphql/getRepoIds)
const graphql_currentUserId = new rpc.RequestType<null, string, void>(graphql/currentUserId)
const graphql_currentUserIsPro = new rpc.RequestType<null, boolean, void>(graphql/currentUserIsPro)
const featureFlags_getFeatureFlag = new rpc.RequestType<TODO, TODO, void>(featureFlags/getFeatureFlag)
const graphql_getCurrentUserCodySubscription = new rpc.RequestType<null, TODO, void>(graphql/getCurrentUserCodySubscription)
const graphql_logEvent = new rpc.RequestType<event, null, void>(graphql/logEvent)
const telemetry_recordEvent = new rpc.RequestType<TelemetryEvent, null, void>(telemetry/recordEvent)
const graphql_getRepoIdIfEmbeddingExists = new rpc.RequestType<TODO, TODO, void>(graphql/getRepoIdIfEmbeddingExists)
const graphql_getRepoId = new rpc.RequestType<TODO, TODO, void>(graphql/getRepoId)
const git_codebaseName = new rpc.RequestType<TODO, TODO, void>(git/codebaseName)
const webview_didDispose = new rpc.RequestType<TODO, null, void>(webview/didDispose)
const webview_receiveMessage = new rpc.RequestType<TODO, null, void>(webview/receiveMessage)
const testing_progress = new rpc.RequestType<TODO, TODO, void>(testing/progress)
const testing_networkRequests = new rpc.RequestType<null, TODO, void>(testing/networkRequests)
const testing_requestErrors = new rpc.RequestType<null, TODO, void>(testing/requestErrors)
const testing_closestPostData = new rpc.RequestType<TODO, TODO, void>(testing/closestPostData)
const testing_progressCancelation = new rpc.RequestType<TODO, TODO, void>(testing/progressCancelation)
const testing_reset = new rpc.RequestType<null, null, void>(testing/reset)
const extensionConfiguration_change = new rpc.RequestType<ExtensionConfiguration, TODO, void>(extensionConfiguration/change)
const extensionConfiguration_status = new rpc.RequestType<null, TODO, void>(extensionConfiguration/status)
const attribution_search = new rpc.RequestType<TODO, TODO, void>(attribution/search)
const ignore_forUri = new rpc.RequestType<TODO, IgnoreForUriResult, void>(ignore/forUri)
const testing_ignore_overridePolicy = new rpc.RequestType<TODO, null, void>(testing/ignore/overridePolicy)
const remoteRepo_has = new rpc.RequestType<TODO, TODO, void>(remoteRepo/has)
const remoteRepo_list = new rpc.RequestType<TODO, TODO, void>(remoteRepo/list)
const initialized = new rpc.NotificationType<null, void>(initialized)
const exit = new rpc.NotificationType<null, void>(exit)
const extensionConfiguration_didChange = new rpc.NotificationType<ExtensionConfiguration, void>(extensionConfiguration/didChange)
const textDocument_didOpen = new rpc.NotificationType<ProtocolTextDocument, void>(textDocument/didOpen)
const textDocument_didChange = new rpc.NotificationType<ProtocolTextDocument, void>(textDocument/didChange)
const textDocument_didFocus = new rpc.NotificationType<TODO, void>(textDocument/didFocus)
const textDocument_didSave = new rpc.NotificationType<TODO, void>(textDocument/didSave)
const textDocument_didClose = new rpc.NotificationType<ProtocolTextDocument, void>(textDocument/didClose)
const workspace_didDeleteFiles = new rpc.NotificationType<DeleteFilesParams, void>(workspace/didDeleteFiles)
const workspace_didCreateFiles = new rpc.NotificationType<CreateFilesParams, void>(workspace/didCreateFiles)
const workspace_didRenameFiles = new rpc.NotificationType<RenameFilesParams, void>(workspace/didRenameFiles)
const $_cancelRequest = new rpc.NotificationType<CancelParams, void>($/cancelRequest)
const autocomplete_clearLastCandidate = new rpc.NotificationType<null, void>(autocomplete/clearLastCandidate)
const autocomplete_completionSuggested = new rpc.NotificationType<CompletionItemParams, void>(autocomplete/completionSuggested)
const autocomplete_completionAccepted = new rpc.NotificationType<CompletionItemParams, void>(autocomplete/completionAccepted)
const progress_cancel = new rpc.NotificationType<TODO, void>(progress/cancel)
// ==============
// Server->Client
// ==============
const window_showMessage = new rpc.RequestType<ShowWindowMessageParams, TODO, void>(window/showMessage)
const textDocument_edit = new rpc.RequestType<TextDocumentEditParams, boolean, void>(textDocument/edit)
const textDocument_openUntitledDocument = new rpc.RequestType<UntitledTextDocument, boolean, void>(textDocument/openUntitledDocument)
const textDocument_show = new rpc.RequestType<TODO, boolean, void>(textDocument/show)
const workspace_edit = new rpc.RequestType<WorkspaceEditParams, boolean, void>(workspace/edit)
const webview_create = new rpc.RequestType<TODO, null, void>(webview/create)
const debug_message = new rpc.NotificationType<DebugMessage, void>(debug/message)
const editTask_didUpdate = new rpc.NotificationType<EditTask, void>(editTask/didUpdate)
const editTask_didDelete = new rpc.NotificationType<EditTask, void>(editTask/didDelete)
const codeLenses_display = new rpc.NotificationType<DisplayCodeLensParams, void>(codeLenses/display)
const ignore_didChange = new rpc.NotificationType<null, void>(ignore/didChange)
const webview_postMessage = new rpc.NotificationType<WebviewPostMessageParams, void>(webview/postMessage)
const progress_start = new rpc.NotificationType<ProgressStartParams, void>(progress/start)
const progress_report = new rpc.NotificationType<ProgressReportParams, void>(progress/report)
const progress_end = new rpc.NotificationType<TODO, void>(progress/end)
const remoteRepo_didChange = new rpc.NotificationType<null, void>(remoteRepo/didChange)
const remoteRepo_didChangeState = new rpc.NotificationType<RemoteRepoFetchState, void>(remoteRepo/didChangeState)
